//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BMA.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BMAEntities : DbContext
    {
        public BMAEntities()
            : base("name=BMAEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<DiscardedInputMaterial> DiscardedInputMaterial { get; set; }
        public virtual DbSet<DiscountByQuantity> DiscountByQuantity { get; set; }
        public virtual DbSet<ExportFrom> ExportFrom { get; set; }
        public virtual DbSet<GuestInfo> GuestInfo { get; set; }
        public virtual DbSet<InputBill> InputBill { get; set; }
        public virtual DbSet<InputMaterial> InputMaterial { get; set; }
        public virtual DbSet<OrderItem> OrderItem { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OtherExpense> OtherExpense { get; set; }
        public virtual DbSet<OutputBill> OutputBill { get; set; }
        public virtual DbSet<OutputMaterial> OutputMaterial { get; set; }
        public virtual DbSet<Policy> Policy { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductMaterial> ProductMaterial { get; set; }
        public virtual DbSet<Recipe> Recipe { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Staff> Staff { get; set; }
        public virtual DbSet<StoreInfo> StoreInfo { get; set; }
        public virtual DbSet<Supplier> Supplier { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TaxRate> TaxRate { get; set; }
        public virtual DbSet<TaxType> TaxType { get; set; }
        public virtual DbSet<User> User { get; set; }
    
        public virtual ObjectResult<sp_GetIncomeMonthly_Result> sp_GetIncomeMonthly(Nullable<int> startMonth, Nullable<int> startYear, Nullable<int> endMonth, Nullable<int> endYear)
        {
            var startMonthParameter = startMonth.HasValue ?
                new ObjectParameter("startMonth", startMonth) :
                new ObjectParameter("startMonth", typeof(int));
    
            var startYearParameter = startYear.HasValue ?
                new ObjectParameter("startYear", startYear) :
                new ObjectParameter("startYear", typeof(int));
    
            var endMonthParameter = endMonth.HasValue ?
                new ObjectParameter("endMonth", endMonth) :
                new ObjectParameter("endMonth", typeof(int));
    
            var endYearParameter = endYear.HasValue ?
                new ObjectParameter("endYear", endYear) :
                new ObjectParameter("endYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetIncomeMonthly_Result>("sp_GetIncomeMonthly", startMonthParameter, startYearParameter, endMonthParameter, endYearParameter);
        }
    
        public virtual ObjectResult<sp_GetIncomeWeekly_Result> sp_GetIncomeWeekly(Nullable<System.DateTime> start_Date, Nullable<System.DateTime> end_Date)
        {
            var start_DateParameter = start_Date.HasValue ?
                new ObjectParameter("start_Date", start_Date) :
                new ObjectParameter("start_Date", typeof(System.DateTime));
    
            var end_DateParameter = end_Date.HasValue ?
                new ObjectParameter("end_Date", end_Date) :
                new ObjectParameter("end_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetIncomeWeekly_Result>("sp_GetIncomeWeekly", start_DateParameter, end_DateParameter);
        }
    
        public virtual ObjectResult<sp_GetIncomeYearly_Result> sp_GetIncomeYearly(Nullable<int> startYear, Nullable<int> endYear)
        {
            var startYearParameter = startYear.HasValue ?
                new ObjectParameter("startYear", startYear) :
                new ObjectParameter("startYear", typeof(int));
    
            var endYearParameter = endYear.HasValue ?
                new ObjectParameter("endYear", endYear) :
                new ObjectParameter("endYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetIncomeYearly_Result>("sp_GetIncomeYearly", startYearParameter, endYearParameter);
        }
    }
}
